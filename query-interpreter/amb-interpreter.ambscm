(define input-prompt ";;; Query input:")
(define output-prompt ";;; Query results:")
(define (require x) (if (not x) (amb)))

(define (map proc items)
  (if (null? items) '()
      (cons (proc (car items))
	    (map proc (cdr items)))))

(define (filter proc items)
  (if (null? items)
      '()
      (cons (proc (car items))
	    (filter proc (cdr items)))))


(define (prompt-for-input string)
  (newline)
  (newline)
  (display string)
  (newline))
(define (announce-output string)
  (newline)
  (display string)
  (newline))

(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
		     (procedure-parameters object)
		     (procedure-body object)
		     '<procedure-env>))
      (display object)))

(define (tagged-list? obj symb)
  (and (pair? obj) (eq? (car obj) symb)))

(define (query-input raw-query-input)
  (let ((q (query-syntax-process raw-query-input)))
    (cond ((assertion-to-be-added? q)
	   (add-rule-or-assertion! (add-assertion-body q)))
	  (else
	   (let ((frame
		  (qeval false q '())))
	     (require q)
	     (instantiate q frame
	       (lambda (v f)
		 (contract-question-mark v))))))))
	   
	   
(define (instantiate exp frame unbound-var-handler)
  (define (copy exp)
    (cond ((var? exp)
	   (let ((binding (binding-in-frame exp frame)))
	     (if binding
		 (copy (binding-value binding))
		 (unbound-var-handler exp frame))))
	  ((pair? exp)
	   (cons (copy (car exp)) (copy (cdr exp))))
	  (else exp)))
  (copy exp))

(define (qeval rulename query frame)
  (let ((qproc (get (type query) 'qeval)))
    (if qproc
	(qproc rulename (contents query) frame)
	(simple-query query frame))))

(define (simple-query query-pattern frame)
  (let ((result (amb (find-assertions query-pattern frame)
		     (apply-rules query-pattern frame))))
    (require result)
    (require (not (null? result)))
    result))

  ;; (stream-flatmap
  ;;  (lambda (frame)
  ;;    (stream-append-delayed
  ;;     (find-assertions query-pattern frame)
  ;;     (delay (apply-rules query-pattern frame))))
  ;;  frame-stream))

(define (extend-if-not-failed
	 var
	 val
	 frame)
  (if (eq? frame 'failed)
      'failed
      (extend var val frame)))


(define (unify-frames-with-variables
	 bindings-list
	 higher-frame
	 lower-frame)
  (cond
   ((null? bindings-list) '())
   (else
    (let ((rest-frame-unified
	    (unify-frames-with-variables
	     (cdr bindings-list)
	     higher-frame
	     lower-frame)))
      (cond ((eq? 'failed rest-frame-unified) 'failed)
	    (else
	     (let ((unified (unify-binding (car bindings-list)
					   higher-frame
					   lower-frame)))
	       (cond
		((eq? 'failed unified) 'failed)
		((eq? 'unbound unified) rest-frame-unified)
		(else
		 (begin
		   (extend (car bindings-list)
			   unified
			   rest-frame-unified)))))))))))

(define (get-variable-list frame)
  (map binding-variable frame))

(define (unique a-list)
  (define (unique-iter output-list a-list)
    (cond ((null? a-list)
	   output-list)
	  ((member (car a-list) output-list)
	   (unique-iter output-list (cdr a-list)))
	  (else
	   (unique-iter (cons (car a-list) output-list)
			(cdr a-list)))))
  (unique-iter '() a-list))
	
(define (unify-frames
	 frame1
	 frame2)
  (let ((varslist (unique (append
			   (get-variable-list frame1)
			   (get-variable-list frame2)))))
    (unify-frames-with-variables
     varslist
     frame1
     frame2)))

(define (print-if-middle-manager string binding)
  (if (and (pair? binding) (not (null? (member 'middle-manager binding))))
      (begin
	(display string)
	(display binding)
	(newline))
      '()))
(define (unify-binding
	 variable
	 higher-frame
	 lower-frame)
  (let ((b1 (binding-in-frame variable higher-frame))
	 (b2 (binding-in-frame variable lower-frame)))
    (cond
     ((and (false? b1) (false? b2)) (display "UNBOUND\n") 'unbound)
     ((false? b1)
      (binding-value b2))
     ((false? b2)
      (binding-value b1))
     ((equal?  b1 b2)
      (binding-value b1))
     ((and (var? (binding-value b1))
	   (not (var? (binding-value b2))))
      (check-binding
       (binding-value b1)
       (binding-value b2)
       higher-frame))
     ((and (var? (binding-value b2))
	   (not (var? (binding-value b1))))
      (check-binding
       (binding-value b2)
       (binding-value b1)
       lower-frame))
     ((and (var? (binding-value b1))
	   (var? (binding-value b2)))
      (follow-binding-chain
       b1
       b2
       higher-frame
       lower-frame))

     (else 'failed))))

(define (follow-binding-chain
	 b1
	 b2
	 higher-frame
	 lower-frame)
  (cond
   ((and (false? b1) (false? b2)) false)
   ((and (false? b1) (not (false? b2))) (binding-value b2))
   ((and (false? b2) (not (false? b1))) (binding-value b1))
   ((and (var? (binding-value b1))
	 (var? (binding-value b2)))
    (let ((followed (follow-binding-chain (binding-in-frame (binding-value b1) higher-frame)
					  (binding-in-frame (binding-value b2) lower-frame)
					  higher-frame
					  lower-frame)))
      (if (false? followed)
	  (binding-value b2)
	  followed)))
   ((and (var? (binding-value b1))
	 (not (var? (binding-value b2))))
    (check-binding
     (binding-value b2)
     b1
     higher-frame))
   ((and (var? (binding-value b2))
	 (not (var? (binding-value b1))))
    (check-binding
     (binding-value b1)
     b2
     lower-frame))
   ((equal? (binding-value b1) (binding-value b2))
    (binding-value b2))
   (else 'failed)))


(define (check-binding found-value binding-for-chain-variable frame)
  (cond
   ((false? binding-for-chain-variable) found-value)
   ((var? (binding-value binding-for-chain-variable))
    (let ((binding (binding-in-frame
		    (binding-value binding-for-chain-variable frame))))
      (if binding
	  (check-binding found-value binding frame)
	  found-value)))
   ((equal? (binding-value binding-for-chain-variable)
	    found-value)
    found-value)
   (else
    'failed)))
	  

(define (join-frames frame1 frame2)
  (require (not (eq? 'failed frame1)))
  (require (not (eq? 'failed frame2)))
  (unify-frames frame1 frame2))

(define (dependent-clause? current-rulename a-clause)
  (or (tagged-list? a-clause 'lisp-value)
      (tagged-list? a-clause 'not)
      (tagged-list? a-clause current-rulename)))

(define (condense-frames listof-frames)
  (if (null? (cdr listof-frames))
      (car listof-frames)
      (join-frames (car listof-frames)
		   (condense-frames (cdr listof-frames)))))

(define (conjoin rulename conjuncts frame-stream)
  (define (conjoin-iter conjuncts current-frame-stream frame-streams)
    (cond
     ((empty-conjunction? conjuncts) (condense-frames (reverse frame-streams)))
     ((dependent-clause? rulename (first-conjunct conjuncts))
      (let ((eval-result (qeval
			  rulename
			  (first-conjunct conjuncts) 
			  (condense-frames (reverse frame-streams)))))
	(conjoin-iter (rest-conjuncts conjuncts)
		      eval-result
		      (list eval-result))))
     (else
      (conjoin-iter (rest-conjuncts conjuncts)
		    current-frame-stream
		    (cons (qeval rulename
				 (first-conjunct conjuncts)
				 current-frame-stream)
			  frame-streams)))))
  (conjoin-iter conjuncts frame-stream (list frame-stream)))
(put 'and 'qeval conjoin)

(define (disjoin rulename disjuncts frame-stream)
  (require disjuncts)
  (require (not (null? disjuncts)))
  (amb
   (qeval rulename (first-disjunct disjuncts) frame-stream)
   (disjoin rulename (rest-disjuncts disjuncts) frame-stream)))

(put 'or 'qeval disjoin)

(define (negate rulename operands frame)
  (let ((rval (try-or-return
	       (qeval
		rulename
		(negated-query operands)
		frame)
	       '())))
    (if (null? rval)
	frame
	(amb))))
(put 'not 'qeval negate)

;; (define (unique-body call) (car call))

;; (define (uniquely-asserted rulename call frame-stream)
;;   (stream-flatmap
;;    (lambda (frame)
;;      (let ((evaled (qeval
;; 		    rulename
;; 		    (unique-body call)
;; 		    (singleton-stream frame))))
;;        (if (stream-null? (stream-cdr evaled))
;; 	   evaled
;; 	   the-empty-stream)))
;;    frame-stream))
;; (put 'unique 'qeval uniquely-asserted)

(define (lisp-value rulename call frame)
  (if (execute
       (instantiate
	   call
	   frame
	 (lambda (v f) "Unknown pattern variable: LISP-VALUE" v)))
      frame
      (amb)))
(put 'lisp-value 'qeval lisp-value)

(define (execute exp)
  (apply (eval (predicate exp) user-initial-environment)
	 (args exp)))


(define (always-true ignore1 ignore2 frame-stream) frame-stream)
(put 'always-true 'qeval always-true)

(define (find-assertions pattern frame)
   (check-assertion (fetch-assertions pattern frame) pattern frame))

(define (check-assertion assertion query-pat query-frame)
  (let ((match-result
	 (pattern-match query-pat assertion query-frame)))
    (require (not (eq? match-result 'failed)))
    match-result))

(define (pattern-match pat dat frame)
  (cond ((eq? frame 'failed) 'failed)
	((equal? pat dat) frame)
	((var? pat) (extend-if-consistent pat dat frame))
	((and (pair? pat) (pair? dat))
	 (pattern-match
	  (cdr pat)
	  (cdr dat)
	  (pattern-match (car pat) (car dat) frame)))
	(else 'failed)))

(define (extend-if-consistent var dat frame)
  (let ((binding (binding-in-frame var frame)))
    (if binding
	(pattern-match (binding-value binding) dat frame)
	(extend var dat frame))))

(define (apply-rules pattern frame)
  (let ((rule (fetch-rules pattern frame)))
    (require rule)
   (apply-a-rule rule pattern frame)))


(define (apply-a-rule rule query-pattern query-frame)
  (require (not (null? rule)))
  (require rule)
  (let ((clean-rule (rename-variables-in rule)))
    (let ((unify-result (unify-match query-pattern
				     (conclusion clean-rule)
				     query-frame)))
      (require (not (eq? unify-result 'failed)))
      (qeval
       (rule-name rule)
       (rule-body clean-rule)
       unify-result))))

(define (rename-variables-in rule)
  (let ((rule-application-id (new-rule-application-id)))
    (define (tree-walk exp)
      (cond ((var? exp)
	     (make-new-variable exp rule-application-id))
	    ((pair? exp)
	     (cons (tree-walk (car exp))
		   (tree-walk (cdr exp))))
	    (else exp)))
    (tree-walk rule)))

(define (unify-match p1 p2 frame)
  (cond ((eq? frame 'failed) 'failed)
	((equal? p1 p2) frame)
	((var? p1) (extend-if-possible p1 p2 frame))
	((var? p2) (extend-if-possible p2 p1 frame))
	((and (pair? p1) (pair? p2))
	 (unify-match (cdr p1)
		      (cdr p2)
		      (unify-match (car p1)
				   (car p2)
				   frame)))
	(else 'failed)))

(define (extend-if-possible var val frame)
  (let ((binding (binding-in-frame var frame)))
    (cond (binding
	   (unify-match (binding-value binding) val frame))
	  ((var? val)
	   (let ((binding (binding-in-frame val frame)))
	     (if binding
		 (unify-match
		  var (binding-value binding) frame)
		 (extend var val frame))))
	  ((depends-on? val var frame)
	   'failed)
	  (else (extend var val frame)))))


(define (depends-on? exp var frame)
  (define (tree-walk e)
    (cond ((var? e)
	   (if (equal? var e)
	       true
	       (let ((b (binding-in-frame e frame)))
		 (if b
		     (tree-walk (binding-value b))
		     false))))
	  ((pair? e)
	   (or (tree-walk (car e))
	       (tree-walk (cdr e))))
	  (else false)))
  (tree-walk exp))

(define THE-ASSERTIONS '())
(define (fetch-assertions pattern frame)
  (get-all-assertions))


(define (get-some-assertions assertion-list)
  (require (not (null? assertion-list)))
  (amb
   (car assertion-list)
   (get-some-assertions (cdr assertion-list))))

(define (get-all-assertions)
  (get-some-assertions THE-ASSERTIONS))

(define (get-indexed-assertions pattern)
  (get-stream (index-key-of pattern) 'assertion-stream))

(define THE-RULES '())
(define (fetch-rules pattern frame)
  (get-all-rules))

(define (get-some-rules rule-list)
  (require (not (null? rule-list)))
  (amb (car rule-list)
       (get-some-rules (cdr rule-list))))
(define (get-all-rules)
  (get-some-rules THE-RULES))

(define (add-rule-or-assertion! assertion)
  (if (rule? assertion)
      (add-rule! assertion)
      (add-assertion! assertion)))

(define (add-assertion! assertion)
  (begin
    (set! THE-ASSERTIONS (cons assertion THE-ASSERTIONS))
    'ok))

(define (add-rule! rule)
  (begin
    (set! THE-RULES (cons rule THE-RULES))
    'ok))


(define (type exp)
  (if (pair? exp)
      (car exp)
      (error "Unknown expression TYPE" exp)))

(define (contents exp)
  (if (pair? exp)
      (cdr exp)
      (error "Unknown expression CONTENTS" exp)))

(define (assertion-to-be-added? exp)
  (eq? (type exp) 'assert!))

(define (add-assertion-body exp) (car (contents exp)))

(define (empty-conjunction? exps) (null? exps))
(define (first-conjunct exps) (car exps))
(define (rest-conjuncts exps) (cdr exps))
(define (empty-disjunction? exps) (null? exps))
(define (first-disjunct exps) (car exps))
(define (rest-disjuncts exps) (cdr exps))
(define (negated-query exps) (car exps))
(define (predicate exps) (car exps))
(define (args exps) (cdr exps))

(define (rule? statement)
  (tagged-list? statement 'rule))

(define (conclusion rule) (cadr rule))
(define (rule-name rule)
  (caadr rule))
(define (rule-body rule)
  (if (null? (cddr rule))
      '(always-true)
      (caddr rule)))


(define (query-syntax-process exp)
  (map-over-symbols expand-question-mark exp))

(define (map-over-symbols proc exp)
  (cond ((pair? exp)
	 (cons (map-over-symbols proc (car exp))
	       (map-over-symbols proc (cdr exp))))
	((symbol? exp) (proc exp))
	(else exp)))

(define (expand-question-mark symbol)
  (let ((chars (symbol->string symbol)))
    (if (string=? (substring chars 0 1) "?")
	(list '?
	      (string->symbol
	       (substring chars 1 (string-length chars))))
	symbol)))

(define (var? exp) (tagged-list? exp '?))
(define (constant-symbol? exp) (symbol? exp))

(define rule-counter 0)

(define (new-rule-application-id)
  (set! rule-counter (+ 1 rule-counter))
  rule-counter)

(define (make-new-variable var rule-application-id)
  (cons '? (cons rule-application-id (cdr var))))

(define (contract-question-mark variable)
  (string->symbol
   (string-append "?"
		  (if (number? (cadr variable))
		      (string-append (symbol->string (caddr variable))
				     "-"
				     (number->string (cadr variable)))
		      (symbol->string (cadr variable))))))

(define (make-binding variable value)
  (cons variable value))

(define (binding-variable binding) (car binding))
(define (binding-value binding) (cdr binding))
(define (binding-in-frame variable frame)
  (assoc variable frame))
(define (remove-binding variable frame)
  (filter (lambda (binding)
	    (not (equal? (binding-variable binding) variable)))
	  frame))
(define (first-binding frame)
  (car frame))
(define (rest-bindings frame)
  (cdr frame))
(define (extend variable value frame)
  (cons (make-binding variable value) frame))
