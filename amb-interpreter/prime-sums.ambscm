(define (prime? n)
  (let ((sqrt-n (sqrt n)))
    (define (iter i)
      (cond
       ((> i (sqrt n)) true)
       ((= (remainder n i) 0) false)
       (else (iter (+ i 1)))))
    (iter 2)))

(define (prime-sum-pair list1 list2)
  (let ((a (an-element-of list1))
	(b (an-element-of list2)))
    (require (prime? (+ a b)))
    (cons a b)))
